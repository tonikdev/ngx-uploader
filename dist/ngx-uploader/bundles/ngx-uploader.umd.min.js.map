{"version":3,"sources":["ng://ngx-uploader/lib/interfaces.ts","node_modules/tslib/tslib.es6.js","ng://ngx-uploader/lib/ngx-uploader.class.ts","ng://ngx-uploader/lib/ng-file-drop.directive.ts","ng://ngx-uploader/lib/ng-file-select.directive.ts","ng://ngx-uploader/lib/ngx-uploader.module.ts"],"names":["Queue","Uploading","Done","Cancelled","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","humanizeBytes","bytes","Math","floor","log","parseFloat","pow","toFixed","NgUploaderService","prototype","handleFiles","incomingFiles","_this","this","allowedIncomingFiles","reduce","acc","checkFile","futureQueueLength","length","queue","isContentTypeAllowed","type","maxUploads","isFileSizeAllowed","size","concat","rejectedFile","makeUploadFile","serviceEvents","emit","file","_a","apply","__spread","arguments","map","uploadFile","initInputEvents","input","subscribe","event","uploadFileIndex","findIndex","uploadScheduler","filter","progress","status","UploadStatus","forEach","id_1","id","subs","sub","unsubscribe","fileIndex","find","splice","startUpload","upload","Observable","observer","pipe","finalize","closed","complete","output","err","url","method","data","headers","xhr","XMLHttpRequest","time","Date","getTime","progressStartTime","startTime","speed","eta","addEventListener","lengthComputable","percentage","round","loaded","total","diff","ceil","speedHuman","endTime","etaHuman","secondsToHuman","onreadystatechange","readyState","DONE","speedAverage","responseStatus","response","JSON","parse","responseHeaders","parseResponseHeaders","getAllResponseHeaders","open","withCredentials","uploadFile_1","uploadIndex","outFile","nativeFile","Object","keys","key","setRequestHeader","bodyToSend","includeWebKitFormBoundary","form","append","fieldName","name","send","abort","sec","toISOString","substr","generateId","random","toString","substring","setContentTypes","contentTypes","Array","undefined","allContentTypesAllowed","mimetype","fileSize","maxFileSize","index","FormData","lastModifiedDate","lastModified","httpHeaders","split","x","concurrency","Number","POSITIVE_INFINITY","EventEmitter","Subject","mergeMap","uploadOutput","NgFileDropDirective","ngOnInit","_sub","options","allowedContentTypes","el","elementRef","nativeElement","uploadInput","stopEvent","ngOnDestroy","onDrop","stopPropagation","preventDefault","dataTransfer","files","onDragOver","onDragLeave","Directive","args","selector","ElementRef","Input","Output","HostListener","NgFileSelectDirective","fileListener","removeEventListener","NgxUploaderModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Subscription } from 'rxjs';\n\nexport interface UploaderOptions {\n  concurrency: number;\n  allowedContentTypes?: string[];\n  maxUploads?: number;\n  maxFileSize?: number;\n}\n\nexport interface BlobFile extends Blob {\n  name: string;\n}\n\nexport enum UploadStatus {\n  Queue,\n  Uploading,\n  Done,\n  Cancelled\n}\n\nexport interface UploadProgress {\n  status: UploadStatus;\n  data?: {\n    percentage: number;\n    speed: number;\n    speedHuman: string;\n    startTime: number | null;\n    endTime: number | null;\n    eta: number | null;\n    etaHuman: string | null;\n  };\n}\n\nexport interface UploadFile {\n  id: string;\n  fileIndex: number;\n  lastModifiedDate: Date;\n  name: string;\n  size: number;\n  type: string;\n  form: FormData;\n  progress: UploadProgress;\n  response?: any;\n  responseStatus?: number;\n  sub?: Subscription | any;\n  nativeFile?: File;\n  responseHeaders?: { [key: string]: string };\n}\n\nexport interface UploadOutput {\n  type: 'addedToQueue' | 'allAddedToQueue' | 'uploading' | 'done' | 'start' | 'cancelled' | 'dragOver'\n      | 'dragOut' | 'drop' | 'removed' | 'removedAll' | 'rejected';\n  file?: UploadFile;\n  nativeFile?: File;\n}\n\nexport interface UploadInput {\n  type: 'uploadAll' | 'uploadFile' | 'cancel' | 'cancelAll' | 'remove' | 'removeAll';\n  url?: string;\n  method?: string;\n  id?: string;\n  fieldName?: string;\n  fileIndex?: number;\n  file?: UploadFile;\n  data?: { [key: string]: string | Blob };\n  headers?: { [key: string]: string };\n  includeWebKitFormBoundary?: boolean; // If false, only the file is send trough xhr.send (WebKitFormBoundary is omit)\n  withCredentials?: boolean;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { EventEmitter } from '@angular/core';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { mergeMap, finalize } from 'rxjs/operators';\nimport { UploadFile, UploadOutput, UploadInput, UploadStatus, BlobFile } from './interfaces';\n\nexport function humanizeBytes(bytes: number): string {\n  if (bytes === 0) {\n    return '0 Byte';\n  }\n\n  const k = 1024;\n  const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n  const i: number = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nexport class NgUploaderService {\n  queue: UploadFile[];\n  serviceEvents: EventEmitter<UploadOutput>;\n  uploadScheduler: Subject<{ file: UploadFile, event: UploadInput }>;\n  subs: { id: string, sub: Subscription }[];\n  contentTypes: string[];\n  maxUploads: number;\n  maxFileSize: number;\n\n  constructor(\n    concurrency: number = Number.POSITIVE_INFINITY,\n    contentTypes: string[] = ['*'],\n    maxUploads: number = Number.POSITIVE_INFINITY,\n    maxFileSize: number = Number.POSITIVE_INFINITY\n  ) {\n    this.queue = [];\n    this.serviceEvents = new EventEmitter<UploadOutput>();\n    this.uploadScheduler = new Subject();\n    this.subs = [];\n    this.contentTypes = contentTypes;\n    this.maxUploads = maxUploads;\n    this.maxFileSize = maxFileSize;\n\n    this.uploadScheduler\n      .pipe(\n        mergeMap(upload => this.startUpload(upload), concurrency)\n      )\n      .subscribe(uploadOutput => this.serviceEvents.emit(uploadOutput));\n  }\n\n  handleFiles(incomingFiles: FileList): void {\n    const allowedIncomingFiles: File[] = [].reduce.call(incomingFiles, (acc: File[], checkFile: File, i: number) => {\n      const futureQueueLength = acc.length + this.queue.length + 1;\n      if (this.isContentTypeAllowed(checkFile.type) && futureQueueLength <= this.maxUploads && this.isFileSizeAllowed(checkFile.size)) {\n        acc = acc.concat(checkFile);\n      } else {\n        const rejectedFile: UploadFile = this.makeUploadFile(checkFile, i);\n        this.serviceEvents.emit({ type: 'rejected', file: rejectedFile });\n      }\n\n      return acc;\n    }, []);\n\n    this.queue.push(...[].map.call(allowedIncomingFiles, (file: File, i: number) => {\n      const uploadFile: UploadFile = this.makeUploadFile(file, i);\n      this.serviceEvents.emit({ type: 'addedToQueue', file: uploadFile });\n      return uploadFile;\n    }));\n\n    this.serviceEvents.emit({ type: 'allAddedToQueue' });\n  }\n\n  initInputEvents(input: EventEmitter<UploadInput>): Subscription {\n    return input.subscribe((event: UploadInput) => {\n      switch (event.type) {\n        case 'uploadFile':\n          const uploadFileIndex = this.queue.findIndex(file => file === event.file);\n          if (uploadFileIndex !== -1 && event.file) {\n            this.uploadScheduler.next({ file: this.queue[uploadFileIndex], event: event });\n          }\n          break;\n        case 'uploadAll':\n          const files = this.queue.filter(file => file.progress.status === UploadStatus.Queue);\n          files.forEach(file => this.uploadScheduler.next({ file: file, event: event }));\n          break;\n        case 'cancel':\n          const id = event.id || null;\n          if (!id) {\n            return;\n          }\n          const subs = this.subs.filter(sub => sub.id === id);\n          subs.forEach(sub => {\n            if (sub.sub) {\n              sub.sub.unsubscribe();\n              const fileIndex = this.queue.findIndex(file => file.id === id);\n              if (fileIndex !== -1) {\n                this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\n                this.serviceEvents.emit({ type: 'cancelled', file: this.queue[fileIndex] });\n              }\n            }\n          });\n          break;\n        case 'cancelAll':\n          this.subs.forEach(sub => {\n            if (sub.sub) {\n              sub.sub.unsubscribe();\n            }\n\n            const file = this.queue.find(uploadFile => uploadFile.id === sub.id);\n            if (file) {\n              file.progress.status = UploadStatus.Cancelled;\n              this.serviceEvents.emit({ type: 'cancelled', file: file });\n            }\n          });\n          break;\n        case 'remove':\n          if (!event.id) {\n            return;\n          }\n\n          const i = this.queue.findIndex(file => file.id === event.id);\n          if (i !== -1) {\n            const file = this.queue[i];\n            this.queue.splice(i, 1);\n            this.serviceEvents.emit({ type: 'removed', file: file });\n          }\n          break;\n        case 'removeAll':\n          if (this.queue.length) {\n            this.queue = [];\n            this.serviceEvents.emit({ type: 'removedAll' });\n          }\n          break;\n      }\n    });\n  }\n\n  startUpload(upload: { file: UploadFile, event: UploadInput }): Observable<UploadOutput> {\n    return new Observable(observer => {\n      const sub = this.uploadFile(upload.file, upload.event)\n        .pipe(finalize(() => {\n          if (!observer.closed) {\n            observer.complete();\n          }\n        }))\n        .subscribe(output => {\n          observer.next(output);\n        }, err => {\n          observer.error(err);\n          observer.complete();\n        }, () => {\n          observer.complete();\n        });\n\n      this.subs.push({ id: upload.file.id, sub: sub });\n    });\n  }\n\n  uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {\n    return new Observable(observer => {\n      const url = event.url || '';\n      const method = event.method || 'POST';\n      const data = event.data || {};\n      const headers = event.headers || {};\n\n      const xhr = new XMLHttpRequest();\n      const time: number = new Date().getTime();\n      let progressStartTime: number = (file.progress.data && file.progress.data.startTime) || time;\n      let speed = 0;\n      let eta: number | null = null;\n\n      xhr.upload.addEventListener('progress', (e: ProgressEvent) => {\n        if (e.lengthComputable) {\n          const percentage = Math.round((e.loaded * 100) / e.total);\n          const diff = new Date().getTime() - time;\n          speed = Math.round(e.loaded / diff * 1000);\n          progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\n          eta = Math.ceil((e.total - e.loaded) / speed);\n\n          file.progress = {\n            status: UploadStatus.Uploading,\n            data: {\n              percentage: percentage,\n              speed: speed,\n              speedHuman: `${humanizeBytes(speed)}/s`,\n              startTime: progressStartTime,\n              endTime: null,\n              eta: eta,\n              etaHuman: this.secondsToHuman(eta)\n            }\n          };\n\n          observer.next({ type: 'uploading', file: file });\n        }\n      }, false);\n\n      xhr.upload.addEventListener('error', (e: Event) => {\n        observer.error(e);\n        observer.complete();\n      });\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          const speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);\n          file.progress = {\n            status: UploadStatus.Done,\n            data: {\n              percentage: 100,\n              speed: speedAverage,\n              speedHuman: `${humanizeBytes(speedAverage)}/s`,\n              startTime: progressStartTime,\n              endTime: new Date().getTime(),\n              eta: eta,\n              etaHuman: this.secondsToHuman(eta || 0)\n            }\n          };\n\n          file.responseStatus = xhr.status;\n\n          try {\n            file.response = JSON.parse(xhr.response);\n          } catch (e) {\n            file.response = xhr.response;\n          }\n\n          file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n\n          observer.next({ type: 'done', file: file });\n\n          observer.complete();\n        }\n      };\n\n      xhr.open(method, url, true);\n      xhr.withCredentials = event.withCredentials ? true : false;\n\n      try {\n        const uploadFile = <BlobFile>file.nativeFile;\n        const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\n\n        if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\n          observer.complete();\n        }\n\n        Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\n\n        let bodyToSend: FormData | BlobFile;\n\n        if (event.includeWebKitFormBoundary !== false) {\n          Object.keys(data).forEach(key => file.form.append(key, data[key]));\n          file.form.append(event.fieldName || 'file', uploadFile, uploadFile.name);\n          bodyToSend = file.form;\n        } else {\n          bodyToSend = uploadFile;\n        }\n\n        this.serviceEvents.emit({ type: 'start', file: file });\n        xhr.send(bodyToSend);\n      } catch (e) {\n        observer.complete();\n      }\n\n      return () => {\n        xhr.abort();\n      };\n    });\n  }\n\n  secondsToHuman(sec: number): string {\n    return new Date(sec * 1000).toISOString().substr(11, 8);\n  }\n\n  generateId(): string {\n    return Math.random().toString(36).substring(7);\n  }\n\n  setContentTypes(contentTypes: string[]): void {\n    if (typeof contentTypes !== 'undefined' && contentTypes instanceof Array) {\n      if (contentTypes.find((type: string) => type === '*') !== undefined) {\n        this.contentTypes = ['*'];\n      } else {\n        this.contentTypes = contentTypes;\n      }\n      return;\n    }\n    this.contentTypes = ['*'];\n  }\n\n  allContentTypesAllowed(): boolean {\n    return this.contentTypes.find((type: string) => type === '*') !== undefined;\n  }\n\n  isContentTypeAllowed(mimetype: string): boolean {\n    if (this.allContentTypesAllowed()) {\n      return true;\n    }\n    return this.contentTypes.find((type: string) => type === mimetype) !== undefined;\n  }\n\n  isFileSizeAllowed(fileSize: number): boolean {\n    if (!this.maxFileSize) {\n      return true;\n    }\n    return fileSize <= this.maxFileSize;\n  }\n\n  makeUploadFile(file: File, index: number): UploadFile {\n    return {\n      fileIndex: index,\n      id: this.generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      form: new FormData(),\n      progress: {\n        status: UploadStatus.Queue,\n        data: {\n          percentage: 0,\n          speed: 0,\n          speedHuman: `${humanizeBytes(0)}/s`,\n          startTime: null,\n          endTime: null,\n          eta: null,\n          etaHuman: null\n        }\n      },\n      lastModifiedDate: new Date(file.lastModified),\n      sub: undefined,\n      nativeFile: file\n    };\n  }\n\n  private parseResponseHeaders(httpHeaders: string) {\n    if (!httpHeaders) {\n      return;\n    }\n\n    return httpHeaders.split('\\n')\n      .map((x: string) => x.split(/: */, 2))\n      .filter((x: string[]) => x[0])\n      .reduce((acc: Object, x: string[]) => {\n        acc[x[0]] = x[1];\n        return acc;\n      }, {});\n  }\n}\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy, HostListener } from '@angular/core';\nimport { UploadOutput, UploadInput, UploaderOptions } from './interfaces';\nimport { NgUploaderService } from './ngx-uploader.class';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[ngFileDrop]'\n})\nexport class NgFileDropDirective implements OnInit, OnDestroy {\n  @Input() options: UploaderOptions;\n  @Input() uploadInput: EventEmitter<UploadInput>;\n  @Output() uploadOutput: EventEmitter<UploadOutput>;\n\n  upload: NgUploaderService;\n  el: HTMLInputElement;\n\n  _sub: Subscription[];\n\n  constructor(public elementRef: ElementRef) {\n    this.uploadOutput = new EventEmitter<UploadOutput>();\n  }\n\n  ngOnInit() {\n    this._sub = [];\n    const concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n    const allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n    const maxUploads = this.options && this.options.maxUploads || Number.POSITIVE_INFINITY;\n    const maxFileSize = this.options && this.options.maxFileSize || Number.POSITIVE_INFINITY;\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes, maxUploads, maxFileSize);\n\n    this.el = this.elementRef.nativeElement;\n\n    this._sub.push(\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\n        this.uploadOutput.emit(event);\n      })\n    );\n\n    if (this.uploadInput instanceof EventEmitter) {\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\n    }\n\n    this.el.addEventListener('drop', this.stopEvent, false);\n    this.el.addEventListener('dragenter', this.stopEvent, false);\n    this.el.addEventListener('dragover', this.stopEvent, false);\n  }\n\n  ngOnDestroy() {\n    this._sub.forEach(sub => sub.unsubscribe());\n  }\n\n  stopEvent = (e: Event) => {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  @HostListener('drop', ['$event'])\n  public onDrop(e: any) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const event: UploadOutput = { type: 'drop' };\n    this.uploadOutput.emit(event);\n    this.upload.handleFiles(e.dataTransfer.files);\n  }\n\n  @HostListener('dragover', ['$event'])\n  public onDragOver(e: Event) {\n    if (!e) {\n      return;\n    }\n\n    const event: UploadOutput = { type: 'dragOver' };\n    this.uploadOutput.emit(event);\n  }\n\n  @HostListener('dragleave', ['$event'])\n  public onDragLeave(e: Event) {\n    if (!e) {\n      return;\n    }\n\n    const event: UploadOutput = { type: 'dragOut' };\n    this.uploadOutput.emit(event);\n  }\n}\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\nimport { UploadOutput, UploaderOptions } from './interfaces';\nimport { NgUploaderService } from './ngx-uploader.class';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[ngFileSelect]'\n})\nexport class NgFileSelectDirective implements OnInit, OnDestroy {\n  @Input() options: UploaderOptions;\n  @Input() uploadInput: EventEmitter<any>;\n  @Output() uploadOutput: EventEmitter<UploadOutput>;\n\n  upload: NgUploaderService;\n  el: HTMLInputElement;\n\n  _sub: Subscription[];\n\n  constructor(public elementRef: ElementRef) {\n    this.uploadOutput = new EventEmitter<UploadOutput>();\n  }\n\n  ngOnInit() {\n    this._sub = [];\n    const concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n    const allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n    const maxUploads = this.options && this.options.maxUploads || Number.POSITIVE_INFINITY;\n    const maxFileSize = this.options && this.options.maxFileSize || Number.POSITIVE_INFINITY;\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes, maxUploads, maxFileSize);\n\n    this.el = this.elementRef.nativeElement;\n    this.el.addEventListener('change', this.fileListener, false);\n\n    this._sub.push(\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\n        this.uploadOutput.emit(event);\n      })\n    );\n\n    if (this.uploadInput instanceof EventEmitter) {\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.el){\n      this.el.removeEventListener('change', this.fileListener, false);\n      this._sub.forEach(sub => sub.unsubscribe());\n    }\n  }\n\n  fileListener = () => {\n    if (this.el.files) {\n      this.upload.handleFiles(this.el.files);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgFileDropDirective } from './ng-file-drop.directive';\nimport { NgFileSelectDirective } from './ng-file-select.directive';\n\n@NgModule({\n  declarations: [NgFileDropDirective, NgFileSelectDirective],\n  exports: [NgFileDropDirective, NgFileSelectDirective]\n})\nexport class NgxUploaderModule { }\n"]}